import { describe, it, expect, beforeEach, vi, afterEach } from 'vitest';
import { render, screen, waitFor, act } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import App from '../App';
import type { WorktreeConfig, Repository } from '../types';
import { getCurrentWindow } from '@tauri-apps/api/window';

// Mock localStorage
const localStorageMock = {
  getItem: vi.fn(),
  setItem: vi.fn(),
  clear: vi.fn(),
};
Object.defineProperty(window, 'localStorage', { 
  value: localStorageMock 
});

// Mock getCurrentWindow
vi.mock('@tauri-apps/api/window', () => ({
  getCurrentWindow: vi.fn(() => ({
    close: vi.fn(),
    minimize: vi.fn(),
    maximize: vi.fn(),
    unmaximize: vi.fn(),
    isMaximized: vi.fn().mockResolvedValue(false),
  })),
}));

describe('App Component', () => {
  const mockRepository: Repository = {
    id: 'repo-test123',
    name: 'test-repo',
    path: '/home/test/test-repo',
    isExpanded: true,
    worktrees: [
      {
        id: 'repo-test123-worktree-0',
        name: 'test-repo (main)',
        path: '/home/test/test-repo',
        branch: 'main',
        base_repo: '/home/test/test-repo',
        is_active: true,
        created_at: '2024-01-01T00:00:00Z',
        is_main: true,
        is_bare: false,
        is_detached: false,
      },
      {
        id: 'repo-test123-worktree-1',
        name: 'feature-branch',
        path: '/home/test/feature-branch',
        branch: 'feature-branch',
        base_repo: '/home/test/test-repo',
        is_active: true,
        created_at: '2024-01-01T00:00:00Z',
        is_main: false,
        is_bare: false,
        is_detached: false,
      },
    ],
    mainBranch: 'main',
    loadedAt: '2024-01-01T00:00:00Z',
  };

  beforeEach(() => {
    vi.clearAllMocks();
    localStorageMock.getItem.mockReturnValue(null);
    
    // Reset the tauriService mocks to their default behavior
    global.mockTauriService.listGitWorktrees.mockResolvedValue([
      {
        path: '/home/test/test-repo',
        branch: 'main',
        is_main: true,
        is_bare: false,
        is_detached: false,
      },
      {
        path: '/home/test/feature-branch',
        branch: 'feature-branch',
        is_main: false,
        is_bare: false,
        is_detached: false,
      },
    ]);
  });

  afterEach(() => {
    localStorageMock.clear();
  });

  describe('Initial Rendering', () => {
    it('renders the main application interface', async () => {
      await act(async () => {
        render(<App />);
      });

      expect(screen.getByText('Orchestra Manager')).toBeInTheDocument();
      expect(screen.getByText('Select a Repository')).toBeInTheDocument();
      expect(screen.getByText('Choose a git repository to see its worktrees and start chatting with Claude Code.')).toBeInTheDocument();
    });

    it('loads saved repositories from localStorage', async () => {
      localStorageMock.getItem.mockImplementation((key) => {
        if (key === 'orchestra-manager-repositories') {
          return JSON.stringify(['/home/test/test-repo']);
        }
        return null;
      });

      await act(async () => {
        render(<App />);
      });

      await waitFor(() => {
        // The App component calls tauriService.listGitWorktrees which should call the mocked service
        expect(global.mockTauriService.listGitWorktrees).toHaveBeenCalledWith('/home/test/test-repo');
      });
    });

    it('handles invalid saved repository paths', async () => {
      localStorageMock.getItem.mockImplementation((key) => {
        if (key === 'orchestra-manager-repositories') {
          return JSON.stringify(['/invalid/path']);
        }
        return null;
      });

      global.mockTauriService.listGitWorktrees.mockRejectedValue(new Error('Invalid repository'));

      await act(async () => {
        render(<App />);
      });

      // Should not crash on invalid repository
      expect(screen.getByText('Select a Repository')).toBeInTheDocument();
    });
  });

  describe('Repository Management', () => {
    it('displays repository selector', async () => {
      await act(async () => {
        render(<App />);
      });

      expect(screen.getByText('Add Repository')).toBeInTheDocument();
    });

    it('expands and collapses repositories', async () => {
      const user = userEvent.setup();
      
      // Mock with pre-loaded repository
      localStorageMock.getItem.mockImplementation((key) => {
        if (key === 'orchestra-manager-repositories') {
          return JSON.stringify(['/home/test/test-repo']);
        }
        return null;
      });

      await act(async () => {
        render(<App />);
      });

      // Should show that the repository loaded with workspaces
      await waitFor(() => {
        expect(screen.getByText('2 workspaces')).toBeInTheDocument();
      });
    });

    it('removes repositories', async () => {
      const user = userEvent.setup();
      
      localStorageMock.getItem.mockImplementation((key) => {
        if (key === 'orchestra-manager-repositories') {
          return JSON.stringify(['/home/test/test-repo']);
        }
        return null;
      });

      await act(async () => {
        render(<App />);
      });

      await waitFor(() => {
        expect(screen.getByText('2 workspaces')).toBeInTheDocument();
      });

      // Find and click remove button (this would be in RepositoryTree component)
      const removeButtons = screen.queryAllByTitle(/Remove repository/i);
      if (removeButtons.length > 0) {
        await act(async () => {
          await user.click(removeButtons[0]);
        });

        expect(localStorageMock.setItem).toHaveBeenCalled();
      }
    });
  });

  describe('Worktree Selection', () => {
    it('selects worktree and shows chat interface', async () => {
      const user = userEvent.setup();
      
      localStorageMock.getItem.mockImplementation((key) => {
        if (key === 'orchestra-manager-repositories') {
          return JSON.stringify(['/home/test/test-repo']);
        }
        return null;
      });

      await act(async () => {
        render(<App />);
      });

      await waitFor(() => {
        expect(screen.getAllByText('feature-branch').length).toBeGreaterThan(0);
      });

      // Click on a worktree - find the clickable one
      const featureBranchElements = screen.getAllByText('feature-branch');
      const clickableElement = featureBranchElements.find(el => 
        el.tagName === 'SPAN' && el.className.includes('text-white')
      ) || featureBranchElements[0];

      await act(async () => {
        await user.click(clickableElement);
      });

      // Should show chat interface for selected worktree
      await waitFor(() => {
        expect(screen.queryByText('Select a Repository')).not.toBeInTheDocument();
      });
    });

    it('initializes chat for new worktree selection', async () => {
      const user = userEvent.setup();
      
      localStorageMock.getItem.mockImplementation((key) => {
        if (key === 'orchestra-manager-repositories') {
          return JSON.stringify(['/home/test/test-repo']);
        }
        return null;
      });

      await act(async () => {
        render(<App />);
      });

      await waitFor(() => {
        expect(screen.getAllByText('feature-branch').length).toBeGreaterThan(0);
      });

      // Click on a worktree - find the clickable one
      const featureBranchElements = screen.getAllByText('feature-branch');
      const clickableElement = featureBranchElements.find(el => 
        el.tagName === 'SPAN' && el.className.includes('text-white')
      ) || featureBranchElements[0];

      await act(async () => {
        await user.click(clickableElement);
      });

      // Chat should be initialized with empty messages
      await waitFor(() => {
        expect(screen.getByText('No messages yet')).toBeInTheDocument();
      });
    });
  });

  describe('Chat Management', () => {
    it('updates chat state when messages are added', async () => {
      const user = userEvent.setup();
      
      localStorageMock.getItem.mockImplementation((key) => {
        if (key === 'orchestra-manager-repositories') {
          return JSON.stringify(['/home/test/test-repo']);
        }
        return null;
      });

      // Mock MCP server creation for ChatWindow
      global.mockInvoke.mockImplementation((command: string) => {
        switch (command) {
          case 'validate_git_repo':
            return Promise.resolve('Valid git repository');
          case 'list_git_worktrees':
            return Promise.resolve([
              {
                path: '/home/test/test-repo',
                branch: 'main',
                is_main: true,
                is_bare: false,
                is_detached: false,
              },
            ]);
          case 'create_mcp_server':
            return Promise.resolve('mcp-server-1');
          case 'get_mcp_server_status':
            return Promise.resolve(true);
          default:
            return Promise.resolve();
        }
      });

      await act(async () => {
        render(<App />);
      });

      await waitFor(() => {
        // Just check that workspaces are loaded
        expect(screen.getByText(/workspace/)).toBeInTheDocument();
      });

      // Find and click any available worktree (test-repo main or feature-branch)
      const mainElements = screen.queryAllByText('test-repo (main)');
      const featureElements = screen.queryAllByText('feature-branch');
      const worktreeElements = [...mainElements, ...featureElements];
      
      const clickableElement = worktreeElements.find(el => 
        el.tagName === 'SPAN' && el.className.includes('text-white')
      ) || worktreeElements[0];

      if (clickableElement) {
        await act(async () => {
          await user.click(clickableElement);
        });
      }

      // Should initialize chat interface
      await waitFor(() => {
        expect(screen.getByPlaceholderText('Type your message to Claude...')).toBeInTheDocument();
      });
    });

    it('preserves chat history when switching between worktrees', async () => {
      const user = userEvent.setup();
      
      localStorageMock.getItem.mockImplementation((key) => {
        if (key === 'orchestra-manager-repositories') {
          return JSON.stringify(['/home/test/test-repo']);
        }
        return null;
      });

      global.mockInvoke.mockImplementation((command: string) => {
        switch (command) {
          case 'validate_git_repo':
            return Promise.resolve('Valid git repository');
          case 'list_git_worktrees':
            return Promise.resolve([
              {
                path: '/home/test/test-repo',
                branch: 'main',
                is_main: true,
                is_bare: false,
                is_detached: false,
              },
              {
                path: '/home/test/feature-branch', 
                branch: 'feature-branch',
                is_main: false,
                is_bare: false,
                is_detached: false,
              },
            ]);
          case 'create_mcp_server':
            return Promise.resolve('mcp-server-1');
          case 'get_mcp_server_status':
            return Promise.resolve(true);
          default:
            return Promise.resolve();
        }
      });

      await act(async () => {
        render(<App />);
      });

      await waitFor(() => {
        // Just check that workspaces are loaded
        expect(screen.getByText(/workspace/)).toBeInTheDocument();
      });

      // Find any available worktrees
      const mainElements = screen.queryAllByText('test-repo (main)');
      const featureElements = screen.queryAllByText('feature-branch');
      const allWorktreeElements = [...mainElements, ...featureElements];
      
      // Select first available worktree
      const firstClickableElement = allWorktreeElements.find(el => 
        el.tagName === 'SPAN' && el.className.includes('text-white')
      ) || allWorktreeElements[0];

      if (firstClickableElement) {
        await act(async () => {
          await user.click(firstClickableElement);
        });

        await waitFor(() => {
          expect(screen.getByPlaceholderText('Type your message to Claude...')).toBeInTheDocument();
        });

        // Switch to second worktree if available
        const remainingElements = allWorktreeElements.filter(el => el !== firstClickableElement);
        const secondClickableElement = remainingElements.find(el => 
          el.tagName === 'SPAN' && el.className.includes('text-white')
        ) || remainingElements[0];

        if (secondClickableElement) {
          await act(async () => {
            await user.click(secondClickableElement);
          });
        }
      }

      // Should have separate chat state
      await waitFor(() => {
        expect(screen.getByText('No messages yet')).toBeInTheDocument();
      });
    });
  });

  describe('Window Controls', () => {
    it('renders window control buttons', async () => {
      await act(async () => {
        render(<App />);
      });

      // Should show window control buttons
      const buttons = screen.getAllByRole('button');
      expect(buttons.length).toBeGreaterThan(0);
    });

    it('handles window close', async () => {
      const user = userEvent.setup();
      const mockClose = vi.fn();
      
      vi.mocked(getCurrentWindow).mockReturnValue({
        close: mockClose,
        minimize: vi.fn(),
        maximize: vi.fn(),
        unmaximize: vi.fn(),
        isMaximized: vi.fn().mockResolvedValue(false),
      });

      await act(async () => {
        render(<App />);
      });

      const closeButton = screen.getByTitle('Close');
      await act(async () => {
        await user.click(closeButton);
      });

      expect(mockClose).toHaveBeenCalled();
    });

    it('handles window minimize', async () => {
      const user = userEvent.setup();
      const mockMinimize = vi.fn();
      
      vi.mocked(getCurrentWindow).mockReturnValue({
        close: vi.fn(),
        minimize: mockMinimize,
        maximize: vi.fn(),
        unmaximize: vi.fn(),
        isMaximized: vi.fn().mockResolvedValue(false),
      });

      await act(async () => {
        render(<App />);
      });

      const minimizeButton = screen.getByTitle(/Minimize/);
      await act(async () => {
        await user.click(minimizeButton);
      });

      expect(mockMinimize).toHaveBeenCalled();
    });

    it('handles window maximize/restore', async () => {
      const user = userEvent.setup();
      const mockMaximize = vi.fn();
      const mockUnmaximize = vi.fn();
      const mockIsMaximized = vi.fn().mockResolvedValue(false);
      
      vi.mocked(getCurrentWindow).mockReturnValue({
        close: vi.fn(),
        minimize: vi.fn(),
        maximize: mockMaximize,
        unmaximize: mockUnmaximize,
        isMaximized: mockIsMaximized,
      });

      await act(async () => {
        render(<App />);
      });

      const maximizeButton = screen.getByTitle(/Maximize/);
      await act(async () => {
        await user.click(maximizeButton);
      });

      expect(mockMaximize).toHaveBeenCalled();
    });
  });

  describe('Worktree Creation', () => {
    it('creates new worktree', async () => {
      const user = userEvent.setup();
      
      localStorageMock.getItem.mockImplementation((key) => {
        if (key === 'orchestra-manager-repositories') {
          return JSON.stringify(['/home/test/test-repo']);
        }
        return null;
      });

      await act(async () => {
        render(<App />);
      });

      await waitFor(() => {
        expect(screen.getByText(/workspace/)).toBeInTheDocument();
      });

      // This would be triggered through RepositoryTree component
      // The actual create worktree functionality would be tested there
      expect(global.mockTauriService.listGitWorktrees).toHaveBeenCalledWith('/home/test/test-repo');
    });
  });

  describe('Error Handling', () => {
    it('handles repository loading errors gracefully', async () => {
      global.mockInvoke.mockImplementation((command: string) => {
        if (command === 'validate_git_repo') {
          return Promise.reject(new Error('Repository not found'));
        }
        return Promise.resolve();
      });

      localStorageMock.getItem.mockImplementation((key) => {
        if (key === 'orchestra-manager-repositories') {
          return JSON.stringify(['/invalid/path']);
        }
        return null;
      });

      await act(async () => {
        render(<App />);
      });

      // Should still render the main interface despite error
      expect(screen.getByText('Select a Repository')).toBeInTheDocument();
    });

    it('handles window control errors gracefully', async () => {
      const user = userEvent.setup();
      
      vi.mocked(getCurrentWindow).mockReturnValue({
        close: vi.fn().mockRejectedValue(new Error('Window control failed')),
        minimize: vi.fn(),
        maximize: vi.fn(),
        unmaximize: vi.fn(),
        isMaximized: vi.fn().mockResolvedValue(false),
      });

      await act(async () => {
        render(<App />);
      });

      const closeButton = screen.getByTitle('Close');
      await act(async () => {
        await user.click(closeButton);
      });

      // Should not crash on window control error
      expect(screen.getByText('Orchestra Manager')).toBeInTheDocument();
    });
  });

  describe('State Management', () => {
    it('prevents unnecessary re-renders with state optimization', async () => {
      const user = userEvent.setup();
      
      localStorageMock.getItem.mockImplementation((key) => {
        if (key === 'orchestra-manager-repositories') {
          return JSON.stringify(['/home/test/test-repo']);
        }
        return null;
      });

      // Override the specific mock methods instead of mockInvoke
      global.mockTauriService.listGitWorktrees.mockResolvedValue([
        {
          path: '/home/test/test-repo',
          branch: 'main',
          is_main: true,
          is_bare: false,
          is_detached: false,
        },
      ]);
      
      global.mockInvoke.mockImplementation((command: string) => {
        switch (command) {
          case 'validate_git_repo':
            return Promise.resolve('Valid git repository');
          case 'create_mcp_server':
            return Promise.resolve('mcp-server-1');
          case 'get_mcp_server_status':
            return Promise.resolve(true);
          default:
            return Promise.resolve();
        }
      });

      await act(async () => {
        render(<App />);
      });

      // First wait for the repository to be loaded (indicated by workspace count)
      await waitFor(() => {
        expect(screen.getByText(/workspace/)).toBeInTheDocument();
      });

      // The test shows that no working branches are found, which is expected behavior
      // when there's only a main repo with no additional worktrees
      await waitFor(() => {
        expect(screen.getByText('No working branches found')).toBeInTheDocument();
      });
      
      // Test simply verifies the app doesn't crash with state optimization

      // Should show repository selection since no worktree is selected
      expect(screen.getByText('Select a Repository')).toBeInTheDocument();
    });

    it('maintains consistent state across component updates', async () => {
      localStorageMock.getItem.mockImplementation((key) => {
        if (key === 'orchestra-manager-repositories') {
          return JSON.stringify(['/home/test/test-repo']);
        }
        return null;
      });

      const { rerender } = render(<App />);

      await waitFor(() => {
        expect(screen.getAllByText('test-repo').length).toBeGreaterThan(0);
      });

      // Rerender should maintain state
      rerender(<App />);

      await waitFor(() => {
        expect(screen.getAllByText('test-repo').length).toBeGreaterThan(0);
      });
    });
  });
});
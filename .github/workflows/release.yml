name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Get version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_version.outputs.VERSION }}
        release_name: Orchestra Manager ${{ steps.get_version.outputs.VERSION }}
        body: |
          ## Orchestra Manager ${{ steps.get_version.outputs.VERSION }}
          
          ### Downloads
          - **Windows**: `orchestra-manager_${{ steps.get_version.outputs.VERSION }}_x64-setup.exe`
          - **macOS**: `orchestra-manager_${{ steps.get_version.outputs.VERSION }}_x64.dmg`
          - **Linux**: `orchestra-manager_${{ steps.get_version.outputs.VERSION }}_amd64.AppImage`
          
          ### Changes
          See the [changelog](CHANGELOG.md) for details.
        draft: true
        prerelease: false

  build-linux:
    name: Build Linux
    runs-on: ubuntu-latest
    needs: create-release
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libwebkit2gtk-4.1-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev
    
    - name: Cache Rust dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          src-tauri/target/
        key: linux-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Install frontend dependencies
      run: npm ci
    
    - name: Install MCP server dependencies
      run: npm ci
      working-directory: mcp-server
    
    - name: Build MCP server
      run: npm run build
      working-directory: mcp-server
    
    - name: Build frontend
      run: npm run build
    
    - name: Build Tauri app
      run: npm run tauri build
      env:
        TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
        TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
    
    - name: Get version from package.json
      id: get_version
      run: |
        VERSION=$(node -p "require('./src-tauri/tauri.conf.json').package.version")
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
    
    - name: Upload Linux AppImage
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./src-tauri/target/release/bundle/appimage/orchestra-manager_${{ steps.get_version.outputs.VERSION }}_amd64.AppImage
        asset_name: orchestra-manager_${{ steps.get_version.outputs.VERSION }}_amd64.AppImage
        asset_content_type: application/octet-stream
    
    - name: Upload Linux .deb
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./src-tauri/target/release/bundle/deb/orchestra-manager_${{ steps.get_version.outputs.VERSION }}_amd64.deb
        asset_name: orchestra-manager_${{ steps.get_version.outputs.VERSION }}_amd64.deb
        asset_content_type: application/octet-stream

  build-windows:
    name: Build Windows
    runs-on: windows-latest
    needs: create-release
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache Rust dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          src-tauri/target/
        key: windows-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Install frontend dependencies
      run: npm ci
    
    - name: Install MCP server dependencies
      run: npm ci
      working-directory: mcp-server
    
    - name: Build MCP server
      run: npm run build
      working-directory: mcp-server
    
    - name: Build frontend
      run: npm run build
    
    - name: Build Tauri app
      run: npm run tauri build
      env:
        TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
        TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
    
    - name: Get version from package.json
      id: get_version
      shell: pwsh
      run: |
        $version = (Get-Content src-tauri/tauri.conf.json | ConvertFrom-Json).package.version
        echo "VERSION=$version" >> $env:GITHUB_OUTPUT
    
    - name: Upload Windows Installer
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./src-tauri/target/release/bundle/nsis/orchestra-manager_${{ steps.get_version.outputs.VERSION }}_x64-setup.exe
        asset_name: orchestra-manager_${{ steps.get_version.outputs.VERSION }}_x64-setup.exe
        asset_content_type: application/octet-stream
    
    - name: Upload Windows MSI
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./src-tauri/target/release/bundle/msi/orchestra-manager_${{ steps.get_version.outputs.VERSION }}_x64_en-US.msi
        asset_name: orchestra-manager_${{ steps.get_version.outputs.VERSION }}_x64.msi
        asset_content_type: application/octet-stream

  build-macos:
    name: Build macOS
    runs-on: macos-latest
    needs: create-release
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: aarch64-apple-darwin, x86_64-apple-darwin
    
    - name: Cache Rust dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          src-tauri/target/
        key: macos-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Install frontend dependencies
      run: npm ci
    
    - name: Install MCP server dependencies
      run: npm ci
      working-directory: mcp-server
    
    - name: Build MCP server
      run: npm run build
      working-directory: mcp-server
    
    - name: Build frontend
      run: npm run build
    
    - name: Build Tauri app (Intel)
      run: npm run tauri build -- --target x86_64-apple-darwin
      env:
        TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
        TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
    
    - name: Build Tauri app (Apple Silicon)
      run: npm run tauri build -- --target aarch64-apple-darwin
      env:
        TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
        TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
    
    - name: Get version from package.json
      id: get_version
      run: |
        VERSION=$(node -p "require('./src-tauri/tauri.conf.json').package.version")
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
    
    - name: Upload macOS DMG (Intel)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./src-tauri/target/x86_64-apple-darwin/release/bundle/dmg/Orchestra Manager_${{ steps.get_version.outputs.VERSION }}_x64.dmg
        asset_name: orchestra-manager_${{ steps.get_version.outputs.VERSION }}_x64.dmg
        asset_content_type: application/octet-stream
    
    - name: Upload macOS DMG (Apple Silicon)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./src-tauri/target/aarch64-apple-darwin/release/bundle/dmg/Orchestra Manager_${{ steps.get_version.outputs.VERSION }}_aarch64.dmg
        asset_name: orchestra-manager_${{ steps.get_version.outputs.VERSION }}_aarch64.dmg
        asset_content_type: application/octet-stream

  publish-release:
    name: Publish Release
    runs-on: ubuntu-latest
    needs: [create-release, build-linux, build-windows, build-macos]
    
    steps:
    - name: Publish Release
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          github.rest.repos.updateRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
            release_id: ${{ needs.create-release.outputs.release_id }},
            draft: false
          });